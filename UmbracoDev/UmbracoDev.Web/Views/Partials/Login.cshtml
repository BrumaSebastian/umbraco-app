@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage


@using Umbraco.Cms.Web.Common.Models
@using Umbraco.Cms.Web.Common.Security
@using Umbraco.Cms.Web.Website.Controllers
@using Umbraco.Cms.Core.Services
@using Umbraco.Extensions
@inject IMemberExternalLoginProviders memberExternalLoginProviders
@inject ITwoFactorLoginService twoFactorLoginService
@{
    var loginModel = new LoginModel();
    // You can modify this to redirect to a different URL instead of the current one
    loginModel.RedirectUrl = Context.Request.Path == "/sign-in" ? "/" : Context.Request.Path;

    var siteSettings = Model.GetSiteSettings();
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>


@if (ViewData.TryGetTwoFactorProviderNames(out var providerNames))
{

    foreach (var providerName in providerNames)
    {
        <div class="2fa-form">
            <h4>Two factor with @providerName.</h4>
            <div asp-validation-summary="All" class="text-danger"></div>
            @using (Html.BeginUmbracoForm<UmbTwoFactorLoginController>(nameof(UmbTwoFactorLoginController.Verify2FACode)))
            {

                <text>
                    <input type="hidden" name="provider" value="@providerName" class="border-2 rounded-md" />
                    Input security code: <input name="code" value="" /><br />
                    <button type="submit" class="btn btn-primary">Validate</button>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                </text>
            }
        </div>
    }

}
else
{
    <div class="login-form mt-10 flex justify-center">

        @using (Html.BeginUmbracoForm<UmbLoginController>("HandleLogin", new { RedirectUrl = loginModel.RedirectUrl }))
        {
            <div class="flex justify-center">
                <a class="btn btn-link text-xl" href="/">
                    <img class="h-auto w-32" src="@(siteSettings?.SiteLogo?.GetCropUrl() ?? "/assets//placeholder_32x32.png")" alt="Site logo"/>
                </a>
            </div>

            <div class="flex w-xs flex-col gap-1 px-5 sm:w-lg">
                
                <h3>Log in with a local account.</h3>
                <hr />
                <div asp-validation-summary="ModelOnly" class="text-error"></div>

                <div class="grid grid-cols-2">
                    <label asp-for="@loginModel.Username" class="form-label"></label>
                    <input asp-for="@loginModel.Username" class="form-control border-2 rounded-md" />
                </div>
                <span asp-validation-for="@loginModel.Username" class="form-text text-error"></span>

                <div class="grid grid-cols-2">
                    <label asp-for="@loginModel.Password" class="form-label"></label>
                    <input asp-for="@loginModel.Password" class="form-control border-2 rounded-md" />
                </div>
                <span asp-validation-for="@loginModel.Password" class="form-text text-error"></span>

                <div class="form-check">
                    <input asp-for="@loginModel.RememberMe" class="form-check-input border-2 rounded-md">
                    <label asp-for="@loginModel.RememberMe" class="form-check-label">
                        @Html.DisplayNameFor(m => loginModel.RememberMe)
                    </label>
                </div>

                <button type="submit" class="btn btn-primary">Log in</button>

                <p>Don’t have an account yet? <a class="text-primary" href="/sign-up">Sign up for free</a></p>
            </div>

        }
        @{
            var loginProviders = await memberExternalLoginProviders.GetMemberProvidersAsync();
            var externalSignInError = ViewData.GetExternalSignInProviderErrors();

            if (loginProviders.Any())
            {
                <hr />
                <h4>Or using external providers</h4>
                if (externalSignInError?.AuthenticationType is null && externalSignInError?.Errors.Any() == true)
                {
                    @Html.DisplayFor(x => externalSignInError.Errors)
                    ;
                }

                @foreach (var login in await memberExternalLoginProviders.GetMemberProvidersAsync())
                {

                    @using (Html.BeginUmbracoForm<UmbExternalLoginController>(nameof(UmbExternalLoginController.ExternalLogin)))
                    {
                        <button type="submit" name="provider" value="@login.ExternalLoginProvider.AuthenticationType">
                            Sign in with @login.AuthenticationScheme.DisplayName
                        </button>

                        if (externalSignInError?.AuthenticationType == login.ExternalLoginProvider.AuthenticationType)
                        {
                            @Html.DisplayFor(x => externalSignInError.Errors)
                            ;
                        }
                    }
                }
            }
        }
    </div>
}